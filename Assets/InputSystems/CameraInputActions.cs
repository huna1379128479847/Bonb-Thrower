//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/InputSystems/CameraInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CameraInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CameraInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CameraInputActions"",
    ""maps"": [
        {
            ""name"": ""CameraActions"",
            ""id"": ""44417320-0582-48dc-b654-8305857f6556"",
            ""actions"": [
                {
                    ""name"": ""Roll"",
                    ""type"": ""Value"",
                    ""id"": ""cad8b22c-1e9d-4109-ae3a-3f841192ffc7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Zoom"",
                    ""type"": ""Value"",
                    ""id"": ""408eea88-a048-4127-b702-19dca5dd967d"",
                    ""expectedControlType"": ""Delta"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ZoomSwitch"",
                    ""type"": ""Button"",
                    ""id"": ""2613348e-232d-43ab-831a-29b1bd6acc77"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5e784079-0a94-4cbc-b8a5-a0bbc2f77080"",
                    ""path"": ""<Joystick>/stick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""35cccf7a-1265-42f4-9228-5b5d3446702f"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""0c5fd724-17ec-47d5-ae67-0594b4056cae"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c4f90946-b2e3-44e6-bcf2-ec32bbeb60d8"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2243fff6-7664-4bc5-9f09-50afb1265c04"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""b0027451-5fe4-43f6-9f64-b226cc2d2c9f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""05660dfb-6507-4fb7-ad8b-27aff1823919"",
                    ""path"": ""<Mouse>/scroll/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""476ccf5b-0f8b-42f1-acb7-61b42506b45b"",
                    ""path"": ""<Mouse>/scroll/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""5258a37a-460c-4235-8dee-68e9af927778"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ZoomSwitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a7ea5f06-9412-4015-86fa-e2be83f0bb17"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ZoomSwitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CameraActions
        m_CameraActions = asset.FindActionMap("CameraActions", throwIfNotFound: true);
        m_CameraActions_Roll = m_CameraActions.FindAction("Roll", throwIfNotFound: true);
        m_CameraActions_Zoom = m_CameraActions.FindAction("Zoom", throwIfNotFound: true);
        m_CameraActions_ZoomSwitch = m_CameraActions.FindAction("ZoomSwitch", throwIfNotFound: true);
    }

    ~@CameraInputActions()
    {
        UnityEngine.Debug.Assert(!m_CameraActions.enabled, "This will cause a leak and performance issues, CameraInputActions.CameraActions.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CameraActions
    private readonly InputActionMap m_CameraActions;
    private List<ICameraActionsActions> m_CameraActionsActionsCallbackInterfaces = new List<ICameraActionsActions>();
    private readonly InputAction m_CameraActions_Roll;
    private readonly InputAction m_CameraActions_Zoom;
    private readonly InputAction m_CameraActions_ZoomSwitch;
    public struct CameraActionsActions
    {
        private @CameraInputActions m_Wrapper;
        public CameraActionsActions(@CameraInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Roll => m_Wrapper.m_CameraActions_Roll;
        public InputAction @Zoom => m_Wrapper.m_CameraActions_Zoom;
        public InputAction @ZoomSwitch => m_Wrapper.m_CameraActions_ZoomSwitch;
        public InputActionMap Get() { return m_Wrapper.m_CameraActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraActionsActions set) { return set.Get(); }
        public void AddCallbacks(ICameraActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraActionsActionsCallbackInterfaces.Add(instance);
            @Roll.started += instance.OnRoll;
            @Roll.performed += instance.OnRoll;
            @Roll.canceled += instance.OnRoll;
            @Zoom.started += instance.OnZoom;
            @Zoom.performed += instance.OnZoom;
            @Zoom.canceled += instance.OnZoom;
            @ZoomSwitch.started += instance.OnZoomSwitch;
            @ZoomSwitch.performed += instance.OnZoomSwitch;
            @ZoomSwitch.canceled += instance.OnZoomSwitch;
        }

        private void UnregisterCallbacks(ICameraActionsActions instance)
        {
            @Roll.started -= instance.OnRoll;
            @Roll.performed -= instance.OnRoll;
            @Roll.canceled -= instance.OnRoll;
            @Zoom.started -= instance.OnZoom;
            @Zoom.performed -= instance.OnZoom;
            @Zoom.canceled -= instance.OnZoom;
            @ZoomSwitch.started -= instance.OnZoomSwitch;
            @ZoomSwitch.performed -= instance.OnZoomSwitch;
            @ZoomSwitch.canceled -= instance.OnZoomSwitch;
        }

        public void RemoveCallbacks(ICameraActionsActions instance)
        {
            if (m_Wrapper.m_CameraActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraActionsActions @CameraActions => new CameraActionsActions(this);
    public interface ICameraActionsActions
    {
        void OnRoll(InputAction.CallbackContext context);
        void OnZoom(InputAction.CallbackContext context);
        void OnZoomSwitch(InputAction.CallbackContext context);
    }
}
